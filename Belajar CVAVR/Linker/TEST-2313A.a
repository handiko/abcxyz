;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/11/2018
;Author  : Handiko Gesang
;Company : SDL Labs
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 10.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdint.h>
;#include <delay.h>
;
;#define RESET   PORTD.2
;#define DATA    PORTD.3
;#define FQ_UD   PORTD.4
;#define W_CLK   PORTD.5
;
;//#define DELAY   ; //delay_us(1);
;
;#define MHZ     1000000.0
;
;#define AD9850_125      0
;#define AD9851_30       1
;#define AD9851_180      2
;
;#define DDS_TYPE        AD9851_180
;
;#if     DDS_TYPE == AD9850_125
;#define TUNING_RATIO    34.35973837
;#define PH_WORD         0x00
;
;#elif   DDS_TYPE == AD9851_30
;#define TUNING_RATIO    143.1655765
;#define PH_WORD         0x00
;
;#else
;#define TUNING_RATIO    23.86092942
;#define PH_WORD         0x01
;#endif
;
;//eeprom unsigned long set_freq=12345678;
;float set_freq=9.65*MHZ;

	.DSEG
;
;void reset_dds(void);
;void init_dds(void);
;void write_freq(void);
;
;void reset_dds(void)
; 0000 003F {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0040         DATA=0;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0041         W_CLK=0;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0042         FQ_UD=0;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0043         RESET=1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0044         //DELAY;
; 0000 0045         RESET=0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0046 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;
;void init_dds(void)
; 0000 0049 {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 004A         reset_dds();
;PCODE: $0000001A VOL: 0
; 0000 004B 
; 0000 004C         W_CLK=1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 004D         //DELAY;
; 0000 004E         W_CLK=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 004F         //DELAY;
; 0000 0050 
; 0000 0051         FQ_UD=1;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0052         //DELAY;
; 0000 0053         FQ_UD=0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0054         //DELAY;
; 0000 0055 
; 0000 0056         write_freq();
;PCODE: $00000023 VOL: 0
; 0000 0057 }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void write_freq(void)
; 0000 005A {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 005B         char i=0;
; 0000 005C 
; 0000 005D         uint32_t data_word = set_freq*TUNING_RATIO;
; 0000 005E 
; 0000 005F         for(i=0;i<32;i++)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	i -> R17
;	data_word -> Y+1
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0060         {
; 0000 0061                 DATA=(data_word & 0x01);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0062                 data_word >>= 1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0063 
; 0000 0064                 //DELAY;
; 0000 0065                 W_CLK=1;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0066                 //DELAY;
; 0000 0067                 W_CLK=0;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0068         }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0069 
; 0000 006A         #if     DDS_TYPE == AD9851_180
; 0000 006B 
; 0000 006C                 DATA=1;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006D 
; 0000 006E                 //DELAY;
; 0000 006F                 W_CLK=1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0070                 //DELAY;
; 0000 0071                 W_CLK=0;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0072 
; 0000 0073                 DATA=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0074 
; 0000 0075                 for(i=0;i<7;i++)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0076                 {
; 0000 0077                         //DELAY;
; 0000 0078                         W_CLK=1;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0079                         //DELAY;
; 0000 007A                         W_CLK=0;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 007B                 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007C 
; 0000 007D         #else
; 0000 007E                 for(i=0;i<8;i++)
; 0000 007F                 {
; 0000 0080                         DATA=0;
; 0000 0081 
; 0000 0082                         //DELAY;
; 0000 0083                         W_CLK=1;
; 0000 0084                         //DELAY;
; 0000 0085                         W_CLK=0;
; 0000 0086                 }
; 0000 0087         #endif
; 0000 0088 
; 0000 0089         FQ_UD=1;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 008A         //DELAY;
; 0000 008B         FQ_UD=0;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 008C         //DELAY;
; 0000 008D         DATA=0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 008E }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;void main(void)
; 0000 0091 {
;PCODE: $00000075 VOL: 0
; 0000 0092 #pragma optsize-
; 0000 0093         CLKPR=0x80;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0094         CLKPR=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0095 #ifdef _OPTIMIZE_SIZE_
; 0000 0096 #pragma optsize+
; 0000 0097 #endif
; 0000 0098 
; 0000 0099         PORTB=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009A         DDRB=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009B 
; 0000 009C         PORTD=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009D         DDRD=0x7F;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 009E 
; 0000 009F         ACSR=0x80;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00A0         DIDR=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00A1 
; 0000 00A2         reset_dds();
;PCODE: $00000086 VOL: 0
; 0000 00A3         init_dds();
;PCODE: $00000087 VOL: 0
; 0000 00A4         write_freq();
;PCODE: $00000088 VOL: 0
; 0000 00A5 
; 0000 00A6         while (1)
;PCODE: $00000089 VOL: 0
; 0000 00A7         {
; 0000 00A8                 //write_freq();
; 0000 00A9         }
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00AA }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
